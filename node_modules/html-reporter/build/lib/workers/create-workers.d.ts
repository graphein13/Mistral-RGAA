/// <reference types="node" />
import type { EventEmitter } from 'events';
type MapOfMethods<T extends ReadonlyArray<string>> = {
    [K in T[number]]: (...args: Array<unknown>) => Promise<unknown> | unknown;
};
export type RegisterWorkers<T extends ReadonlyArray<string>> = EventEmitter & MapOfMethods<T>;
export declare const createWorkers: (runner: {
    registerWorkers: (workerFilePath: string, exportedMethods: string[]) => RegisterWorkers<[
        'saveDiffTo'
    ]>;
}) => RegisterWorkers<[
    'saveDiffTo'
]>;
export type CreateWorkersRunner = Parameters<typeof createWorkers>[0];
export {};
