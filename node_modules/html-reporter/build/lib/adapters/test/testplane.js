"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestplaneTestAdapter = void 0;
const testplane_1 = require("../test-result/testplane");
const constants_1 = require("../../constants");
class TestplaneTestAdapter {
    static create(test) {
        return new this(test);
    }
    constructor(test) {
        this._test = test;
    }
    get original() {
        return this._test;
    }
    get id() {
        return this._test.id;
    }
    get pending() {
        return this._test.pending;
    }
    get disabled() {
        return this._test.disabled;
    }
    get silentlySkipped() {
        return isSilentlySkipped(this._test);
    }
    get browserId() {
        return this._test.browserId;
    }
    get fullName() {
        return this._test.fullTitle();
    }
    get file() {
        return this._test.file;
    }
    get titlePath() {
        return this._test.fullTitle().split(constants_1.DEFAULT_TITLE_DELIMITER);
    }
    createTestResult(opts) {
        const { status, assertViewResults, error, sessionId, meta, attempt = constants_1.UNKNOWN_ATTEMPT, duration } = opts;
        const test = this._test.clone();
        [
            { key: 'assertViewResults', value: assertViewResults },
            { key: 'err', value: error },
            { key: 'sessionId', value: sessionId },
            { key: 'meta', value: meta }
        ].forEach(({ key, value }) => {
            if (value) {
                // @ts-expect-error TODO: fix this assignment.
                test[key] = value;
            }
        });
        return testplane_1.TestplaneTestResultAdapter.create(test, { attempt, status, duration });
    }
}
exports.TestplaneTestAdapter = TestplaneTestAdapter;
function isSilentlySkipped(runnable) {
    return Boolean(runnable.silentSkip || runnable.parent && isSilentlySkipped(runnable.parent));
}
//# sourceMappingURL=testplane.js.map