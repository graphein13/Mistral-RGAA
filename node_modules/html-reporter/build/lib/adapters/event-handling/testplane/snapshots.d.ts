import type { eventWithTime as RrwebEvent } from '@rrweb/types';
import type Testplane from 'testplane';
import { ReporterTestResult } from '../../test-result';
import { SnapshotAttachment } from '../../../types';
import { EventSource } from '../../../gui/event-source';
export interface TestContext {
    testPath: string[];
    browserId: string;
}
export interface SnapshotsData {
    rrwebSnapshots: RrwebEvent[];
}
export declare const snapshotsInProgress: Record<string, RrwebEvent[]>;
export declare const getSnapshotHashWithoutAttempt: (context: TestContext) => string;
interface CreateSnapshotFilePathParams {
    attempt: number;
    hash: string;
    browserId: string;
}
export declare function createSnapshotFilePath({ attempt: attemptInput, hash, browserId }: CreateSnapshotFilePathParams): string;
export declare const handleDomSnapshotsEvent: (client: EventSource | null, context: TestContext, data: SnapshotsData) => void;
interface FinalizeSnapshotsParams {
    testResult: ReporterTestResult;
    attempt: number;
    recordConfig: Testplane['config']['record'];
    reportPath: string;
    eventName: Testplane['events'][keyof Testplane['events']];
    events: Testplane['events'];
}
export declare const finalizeSnapshotsForTest: ({ testResult, attempt, reportPath, recordConfig, events, eventName }: FinalizeSnapshotsParams) => Promise<SnapshotAttachment[]>;
export {};
