import { TestStatus } from '../../constants';
import { ErrorDetails, ImageFile, ImageInfoFull, SnapshotAttachment, TestError, TestStepCompressed } from '../../types';
import { Test, TestResult } from '@jest/reporters';
import { ReporterTestResult } from './index';
export type AssertionResult = TestResult['testResults'][number];
export declare class JestTestResultAdapter implements ReporterTestResult {
    private readonly _test;
    private readonly _testResult;
    private readonly _assertionResult;
    private readonly _attempt;
    static create(this: typeof JestTestResultAdapter, test: Test, testResult: TestResult, assertionResult: AssertionResult, attempt: number): JestTestResultAdapter;
    constructor(test: Test, testResult: TestResult, assertionResult: AssertionResult, attempt?: number);
    get attachments(): SnapshotAttachment[];
    get attempt(): number;
    get browserId(): string;
    get description(): string;
    private getErrorMessage;
    private getErrorStack;
    get error(): TestError | undefined;
    get errorDetails(): ErrorDetails | null;
    get file(): string;
    get fullName(): string;
    get id(): string;
    get imageDir(): string;
    get imagesInfo(): ImageInfoFull[];
    get meta(): Record<string, unknown>;
    get multipleTabs(): boolean;
    get screenshot(): ImageFile | null;
    get sessionId(): string;
    get skipReason(): string;
    get state(): {
        name: string;
    };
    get status(): TestStatus;
    get testPath(): string[];
    get history(): TestStepCompressed[];
    get timestamp(): number;
    get url(): string;
    get duration(): number;
}
