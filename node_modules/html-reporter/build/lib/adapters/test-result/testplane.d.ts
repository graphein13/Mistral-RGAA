import type Testplane from 'testplane';
import type { Test as TestplaneTest } from 'testplane';
import { ValueOf } from 'type-fest';
import { TestStatus } from '../../constants';
import { ErrorDetails, TestplaneTestResult, ImageBase64, ImageInfoFull, TestError, TestStepCompressed, Attachment } from '../../types';
import { ReporterTestResult } from './index';
export declare const getStatus: (eventName: ValueOf<Testplane['events']>, events: Testplane['events'], testResult: TestplaneTestResult) => TestStatus;
export interface TestplaneTestResultAdapterOptions {
    attempt: number;
    status: TestStatus;
    duration: number;
}
export declare class TestplaneTestResultAdapter implements ReporterTestResult {
    private _testResult;
    private _errorDetails;
    private _timestamp;
    private _attempt;
    private _status;
    private _duration;
    static create(this: new (testResult: TestplaneTest | TestplaneTestResult, options: TestplaneTestResultAdapterOptions) => TestplaneTestResultAdapter, testResult: TestplaneTest | TestplaneTestResult, options: TestplaneTestResultAdapterOptions): TestplaneTestResultAdapter;
    constructor(testResult: TestplaneTest | TestplaneTestResult, { attempt, status, duration }: TestplaneTestResultAdapterOptions);
    get fullName(): string;
    get skipReason(): string;
    get status(): TestStatus;
    get sessionId(): string;
    get browserId(): string;
    get imagesInfo(): ImageInfoFull[];
    get attempt(): number;
    get history(): TestStepCompressed[];
    get error(): undefined | TestError;
    get imageDir(): string;
    get state(): {
        name: string;
    };
    get testPath(): string[];
    get id(): string;
    get screenshot(): ImageBase64 | undefined;
    get description(): string | undefined;
    get meta(): Record<string, unknown>;
    get errorDetails(): ErrorDetails | null;
    get file(): string;
    get url(): string | undefined;
    get multipleTabs(): boolean;
    get timestamp(): number | undefined;
    set timestamp(timestamp: number | undefined);
    get duration(): number;
    get attachments(): Attachment[];
}
